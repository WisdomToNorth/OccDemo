{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++ build active file",
            "command": "/usr/bin/g++",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        },
    {
      "type": "shell",
      "label": "Clang++: 编译单文件",
      // 编译器路径
      "command": "clang++",
      // 编译器后附的参数，反映在终端里即"clang+ arg1 arg2 arg3..."
      "args": [
        // 编译的文件
        "${fileDirname}\\${fileBasenameNoExtension}.cpp",
        // 生成文件到 build 文件夹中，文件名为debug.exe
        "-o",
        "${workspaceFolder}\\build\\test.exe",
        // 启用调试(debug)
        "-g",
        // 启用诊断
        "-pedantic",
        "-Wall",
        "-Wextra",
        // 多线程支持
        "-pthread",
        // 使用 LLVM lld 链接器而不是默认链接器
        "-fuse-ld=lld",
        // 检查内存越界和资源泄露
        "-fsanitize=address",
        "-fsanitize=undefined",
        // 分析所有注释(这其实只需告诉 Clangd ，即添加到 compile_commands.json 中)
        // Clang 默认只分析 Doxygen 风格("/**", "///"开头)的注释
        // "-fparse-all-comments",
        // 设置 C++ 的标准库为 libc++: Clang 对应的标准库
        "-stdlib=libc++",
        // 设置 C++ 版本为 c++20
        "-std=c++20",
        // 为给定环境生成代码
        "--target=x86_64-w64-mingw"
      ],
      "options": {
        // Clang 的启动路径
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": ["$gcc"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档，即使设为never，手动点进去还是可以看到
        "reveal": "always",
        // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
        "focus": false,
        // 不同的文件的编译信息共享一个终端面板
        "panel": "shared"
      },
      "detail": "Clang++: 编译单个文件"
    },
    {
      "type": "shell",
      "label": "Clang++: 编译多文件",
      "command": "clang++",
      "args": [
        "${fileDirname}\\*.cpp",
        "-o",
        "${workspaceFolder}\\build\\test.exe",
        "-g",
        "-pedantic",
        "-Wall",
        "-Wextra",
        "-pthread",
        "-fuse-ld=lld",
        "-fsanitize=address",
        "-fsanitize=undefined",
        "-stdlib=libc++",
        "-std=c++20",
        "--target=x86_64-w64-mingw"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": ["$gcc"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Clang++: 编译当前文件所在目录里所有文件"
    }
      ],
    "version": "2.0.0"
}